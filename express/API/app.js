const oracledb = require('oracledb');
const dbConfig = require('./dbconfig.js');
const express = require("express");
const cors = require('cors');

var bodyParser = require('body-parser');

var app = express();
// CORS for new provisioning 
var corsOptions = { 
    origin: 'http://myserver.mycommpany.com',
    optionsSuccessStatus: 200 // For legacy browser support
}

app.use(cors(corsOptions))
app.use(bodyParser.json()); // for parsing application/json
app.use(bodyParser.urlencoded({ extended: true })); // for parsing application/x-www-form-urlencoded


const HTTP_PORT = 8000
app.listen(HTTP_PORT, () => {
    console.log("Server is listening on port " + HTTP_PORT);
});


async function runInitial(connection) {
    try {

        s = 'CREATE TABLE heroes( \
            id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,\
            name VARCHAR2(20)  NOT NULL\
        )';
        result = await connection.execute(s);
        console.log('table created', result);

        result = await connection.executeMany(
            `INSERT INTO heroes (name) VALUES (:nm)`,
            [['Dr Nice'], ['Narco'], ['Bombasto'],
            ['Celeritas'], ['Magneta'], ['RubberMan']]
        );
        console.log('table initialized', result);
        await connection.commit();
    } catch (err) {
        console.error('initialization', err);
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('initialization', err);
            }
        }
    }
}

oracledb.getConnection(dbConfig)
    .catch(err => console.error("Erro opening database " + err.message))
    .then(conn => runInitial(conn));

async function dbSelect(connection, sql, params) {
    try {

        result = await connection.execute(sql, params, {outFormat: oracledb.OUT_FORMAT_OBJECT});
        console.log('select result', result);

        return result.rows;
    } catch (err) {
        console.error('select', err);
    } finally {
        if (connection) {
            try {
                await connection.close();
            } catch (err) {
                console.error('select', err);
            }
        }
    }
}


app.get("/heroes/:id", async (req, res, next) => {
    var params = [req.params.id];
    try {
        conn = await oracledb.getConnection(dbConfig);
    } catch (err) {
        console.error("Error opening database " + err.message);
        res.status(400).json({ "error db open": err.message });
        return;
    }
    try {
        rows = await dbSelect(conn,'SELECT id "id", name "name" FROM heroes where id = :v',params)
        res.status(200).json(rows[0]);
    } catch (err) {
        console.error("Error in sql select " + err.message);
        res.status(400).json({ "error in sql select": err.message });
        return;
    }
});

app.get("/heroes/", async (req, res, next) => {
    console.log('get params',req.query);
    if (req.query && req.query.name) {
        search = '%' + req.query.name + '%';
    } else {
        search = '%';
    }
    try {
        conn = await oracledb.getConnection(dbConfig);
    } catch (err) {
        console.error("Error opening database " + err.message);
        res.status(400).json({ "Error opening database": err.message });
        return;
    }
    try {
        rows = await dbSelect(conn,'SELECT id "id", name "name" FROM heroes where name LIKE :v',[search]);
        if (rows) {
            console.log('get heroes', rows);
            res.status(200).json(rows);  
        } else {
            res.status(400).json({ "error": "sql select error" });
            return;
        };
    } catch (err) {
        console.error("Error in sql select " + err.message);
        res.status(400).json({ "sql select error": err.message });
        return;
    }
});

app.post("/heroes/", async (req, res, next) => {
    var reqBody = req.body;
    console.log(reqBody);
    try {
        conn = await oracledb.getConnection(dbConfig);
    } catch (err) {
        console.error("Error opening database " + err.message);
        res.status(400).json({ "Error opening database ": err.message });
        return;
    }
    try {
        sql = 'INSERT INTO heroes (name) VALUES (:nm)';
        await conn.execute(sql, [reqBody.name], {autoCommit: true});
        rows = await dbSelect(conn,'SELECT id "id", name "name" FROM heroes where name = :nm',[reqBody.name])
        res.status(201).json({
            "id": rows[0].id, "name": reqBody.name
        });
        return;
    } catch (err) {
        console.error("Error in insert " + err.message);
        res.status(400).json({ "Error in insert": err.message });
        return;
    }
});

app.put("/heroes", async (req, res, next) => {
    var reqBody = req.body;
    var hero = [reqBody.name, reqBody.id]
    try {
        conn = await oracledb.getConnection(dbConfig);
    } catch (err) {
        console.error("Error opening database " + err.message);
        res.status(400).json({ "Error opening database ": err.message });
        return;
    }
    try {
        sql = 'UPDATE heroes set name = :nm WHERE id = :id';
        await conn.execute(sql, 
            { id : {val: reqBody.id }, nm : {val: reqBody.name} }, 
            {autoCommit: true});
        res.status(201).json({
            "id": rows[0].id, "name": reqBody.name
        });
        return;
    } catch (err) {
        console.error("Error in update " + err.message);
        res.status(400).json({ "Error in update": err.message });
        return;
    }
});

app.delete("/heroes/:id", async (req, res, next) => {
    try {
        conn = await oracledb.getConnection(dbConfig);
    } catch (err) {
        console.error("Error opening database " + err.message);
        res.status(400).json({ "Error opening database ": err.message });
        return;
    }
    try {
        sql = 'DELETE FROM heroes WHERE id = :id';
        await conn.execute(sql, 
            [req.params.id], 
            {autoCommit: true});
        res.status(201).json({ deletedID: req.params.id });
        return;
    } catch (err) {
        console.error("Error in delete " + err.message);
        res.status(400).json({ "Error in delete": err.message });
        return;
    }
});